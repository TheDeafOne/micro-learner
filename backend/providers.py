from __future__ import annotations

from dataclasses import dataclass
from typing import Protocol

from .models import Item


class TranscriptProvider(Protocol):
    def fetch(self, item: Item) -> str: ...


@dataclass
class FakeTranscriptProvider:
    name: str = "fake"

    def fetch(self, item: Item) -> str:
        title = item.title or f"Item {item.id}"
        return (
            f"Transcript for {title}\n\n"
            "This is placeholder transcript content generated by the fake provider."
        )


def infer_provider_from_url(url: str | None) -> str | None:
    if not url:
        return None
    lowered = url.lower()
    if "panopto" in lowered:
        return "panopto"
    if "zoom" in lowered:
        return "zoom"
    return None


def resolve_provider(item: Item) -> TranscriptProvider:
    return FakeTranscriptProvider(name=item.provider or "fake")
